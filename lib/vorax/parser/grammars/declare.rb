
# line 1 "lib/vorax/parser/grammars/declare.rl"

# line 41 "lib/vorax/parser/grammars/declare.rl"


require 'set'

module Vorax

  module Parser

    # A class used to parse a PLSQL package spec.
    class Declare

      attr_reader :constants, :types, :exceptions, :cursors, :variables, :functions, :procedures

      # Walks the provided spec in order to compute the structure.
      #
      # param data [String] the package spec
      def walk(data)
        @constants = Set.new
        @types = Set.new
        @exceptions = Set.new
        @cursors = Set.new
        @variables = Set.new
        @functions = Set.new
        @procedures = Set.new
        if data
          eof = data.length
          
# line 33 "lib/vorax/parser/grammars/declare.rb"
class << self
	attr_accessor :_declare_actions
	private :_declare_actions, :_declare_actions=
end
self._declare_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	27, 1, 28, 1, 29, 2, 1, 25, 
	2, 1, 26, 2, 1, 29, 2, 4, 
	5, 2, 4, 6, 2, 4, 7, 2, 
	4, 8, 2, 4, 9, 2, 4, 10, 
	2, 4, 11, 2, 4, 12, 2, 4, 
	13, 2, 4, 14, 2, 17, 1, 3, 
	4, 0, 12, 3, 4, 0, 13, 3, 
	4, 1, 9, 3, 4, 1, 10, 3, 
	4, 1, 11, 3, 4, 8, 1
]

class << self
	attr_accessor :_declare_key_offsets
	private :_declare_key_offsets, :_declare_key_offsets=
end
self._declare_key_offsets = [
	0, 11, 12, 13, 14, 15, 17, 19, 
	24, 47, 48, 53, 54, 55, 56, 57, 
	59, 61, 63, 65, 67, 69, 71, 73, 
	75, 77, 79, 81, 83, 85, 87, 89, 
	95, 96, 97, 98, 99, 101, 115, 116, 
	117, 118, 119, 121, 137, 153, 169, 185, 
	201, 215, 232, 233, 238, 239, 240, 241, 
	242, 244, 258, 259, 260, 261, 262, 264, 
	280, 296, 312, 328, 344, 360, 376, 392, 
	408, 424, 440, 456, 472, 488, 504, 519, 
	520, 521, 522, 523, 525, 541, 557, 571, 
	580, 581, 582, 583, 584, 586, 602, 618, 
	634, 650, 666, 682, 698, 712, 729, 730, 
	731, 732, 733, 734, 736, 752, 770, 786, 
	802, 818, 834, 850, 866, 882, 898, 914, 
	928, 945, 946, 947, 948, 949, 950, 952, 
	968, 984, 1000, 1014, 1031, 1032, 1037, 1038, 
	1039, 1040, 1041, 1043, 1057, 1058, 1059, 1060, 
	1061, 1063, 1079, 1095, 1111, 1127, 1143, 1159, 
	1175, 1191, 1207, 1223, 1239, 1255, 1271, 1287, 
	1303, 1318, 1319, 1320, 1321, 1322, 1324, 1326, 
	1328, 1330, 1332, 1334, 1336, 1337, 1338, 1339, 
	1340, 1342, 1365, 1366, 1367, 1368, 1369, 1371, 
	1379, 1390, 1399, 1404, 1409, 1423, 1428, 1428, 
	1437, 1448, 1459, 1470, 1481, 1492, 1503, 1514, 
	1525, 1536, 1547, 1558, 1569, 1580, 1591, 1602, 
	1617, 1617, 1626, 1637, 1648, 1659, 1670, 1681, 
	1692, 1703, 1714, 1725, 1736, 1747, 1758, 1769, 
	1780, 1791, 1806, 1811, 1825, 1830, 1831, 1832, 
	1833, 1834, 1835
]

class << self
	attr_accessor :_declare_trans_keys
	private :_declare_trans_keys, :_declare_trans_keys=
end
self._declare_trans_keys = [
	32, 45, 47, 65, 68, 73, 97, 100, 
	105, 9, 13, 45, 10, 42, 42, 42, 
	47, 83, 115, 32, 45, 47, 9, 13, 
	32, 34, 45, 47, 67, 69, 70, 80, 
	84, 95, 99, 101, 102, 112, 116, 9, 
	13, 35, 36, 65, 90, 97, 122, 34, 
	32, 45, 47, 9, 13, 45, 10, 42, 
	42, 42, 47, 79, 111, 78, 110, 83, 
	115, 84, 116, 65, 97, 78, 110, 84, 
	116, 88, 120, 67, 99, 69, 101, 80, 
	112, 84, 116, 73, 105, 79, 111, 78, 
	110, 32, 45, 47, 59, 9, 13, 45, 
	10, 42, 42, 42, 47, 32, 45, 47, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 45, 10, 42, 42, 42, 
	47, 32, 45, 47, 85, 95, 117, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 82, 95, 114, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 83, 95, 115, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 79, 95, 111, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 82, 95, 114, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	34, 45, 47, 67, 69, 95, 99, 101, 
	9, 13, 35, 36, 65, 90, 97, 122, 
	34, 32, 45, 47, 9, 13, 45, 10, 
	42, 42, 42, 47, 32, 45, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	32, 45, 47, 79, 95, 111, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 78, 95, 110, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 83, 95, 115, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 84, 95, 116, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 65, 95, 97, 9, 13, 
	35, 36, 48, 57, 66, 90, 98, 122, 
	32, 45, 47, 78, 95, 110, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 84, 95, 116, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 88, 95, 120, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 67, 95, 99, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 69, 95, 101, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 80, 95, 112, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 84, 95, 116, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 73, 95, 105, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 79, 95, 111, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 78, 95, 110, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 59, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 45, 
	10, 42, 42, 42, 47, 32, 45, 47, 
	78, 95, 110, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 45, 47, 
	68, 95, 100, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 45, 47, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 45, 47, 67, 69, 
	99, 101, 9, 13, 45, 10, 42, 42, 
	42, 47, 32, 45, 47, 85, 95, 117, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 78, 95, 110, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 67, 95, 99, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 84, 95, 116, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 73, 95, 105, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 79, 95, 111, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 78, 95, 110, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 95, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 34, 45, 47, 67, 69, 95, 99, 
	101, 9, 13, 35, 36, 65, 90, 97, 
	122, 34, 45, 10, 42, 42, 42, 47, 
	32, 45, 47, 82, 95, 114, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 65, 79, 95, 97, 111, 
	9, 13, 35, 36, 48, 57, 66, 90, 
	98, 122, 32, 45, 47, 71, 95, 103, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 77, 95, 109, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 65, 95, 97, 
	9, 13, 35, 36, 48, 57, 66, 90, 
	98, 122, 32, 45, 47, 67, 95, 99, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 69, 95, 101, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 68, 95, 100, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 85, 95, 117, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 82, 95, 114, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 69, 95, 101, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 95, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 34, 45, 47, 67, 69, 95, 99, 
	101, 9, 13, 35, 36, 65, 90, 97, 
	122, 34, 45, 10, 42, 42, 42, 47, 
	32, 45, 47, 89, 95, 121, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 80, 95, 112, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 69, 95, 101, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 45, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 34, 
	45, 47, 67, 69, 95, 99, 101, 9, 
	13, 35, 36, 65, 90, 97, 122, 34, 
	32, 45, 47, 9, 13, 45, 10, 42, 
	42, 42, 47, 32, 45, 47, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 45, 10, 42, 42, 42, 47, 32, 
	45, 47, 79, 95, 111, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 78, 95, 110, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 83, 95, 115, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 84, 95, 116, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 65, 95, 97, 9, 13, 35, 
	36, 48, 57, 66, 90, 98, 122, 32, 
	45, 47, 78, 95, 110, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 84, 95, 116, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 88, 95, 120, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 67, 95, 99, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 69, 95, 101, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 80, 95, 112, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 84, 95, 116, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 73, 95, 105, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 79, 95, 111, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 78, 95, 110, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 59, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 45, 10, 
	42, 42, 42, 47, 69, 101, 67, 99, 
	76, 108, 65, 97, 82, 114, 69, 101, 
	34, 39, 10, 42, 42, 47, 32, 34, 
	45, 47, 67, 69, 70, 80, 84, 95, 
	99, 101, 102, 112, 116, 9, 13, 35, 
	36, 65, 90, 97, 122, 45, 10, 42, 
	42, 42, 47, 32, 34, 39, 45, 47, 
	59, 9, 13, 32, 45, 47, 65, 68, 
	73, 97, 100, 105, 9, 13, 32, 45, 
	47, 67, 69, 99, 101, 9, 13, 32, 
	45, 47, 9, 13, 32, 45, 47, 9, 
	13, 32, 45, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 9, 13, 95, 35, 36, 48, 
	57, 65, 90, 97, 122, 79, 95, 111, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	78, 95, 110, 35, 36, 48, 57, 65, 
	90, 97, 122, 83, 95, 115, 35, 36, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 35, 36, 48, 57, 65, 90, 97, 
	122, 65, 95, 97, 35, 36, 48, 57, 
	66, 90, 98, 122, 78, 95, 110, 35, 
	36, 48, 57, 65, 90, 97, 122, 84, 
	95, 116, 35, 36, 48, 57, 65, 90, 
	97, 122, 88, 95, 120, 35, 36, 48, 
	57, 65, 90, 97, 122, 67, 95, 99, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	69, 95, 101, 35, 36, 48, 57, 65, 
	90, 97, 122, 80, 95, 112, 35, 36, 
	48, 57, 65, 90, 97, 122, 84, 95, 
	116, 35, 36, 48, 57, 65, 90, 97, 
	122, 73, 95, 105, 35, 36, 48, 57, 
	65, 90, 97, 122, 79, 95, 111, 35, 
	36, 48, 57, 65, 90, 97, 122, 78, 
	95, 110, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 45, 47, 59, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 95, 35, 36, 48, 57, 65, 90, 
	97, 122, 79, 95, 111, 35, 36, 48, 
	57, 65, 90, 97, 122, 78, 95, 110, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	83, 95, 115, 35, 36, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 35, 36, 
	48, 57, 65, 90, 97, 122, 65, 95, 
	97, 35, 36, 48, 57, 66, 90, 98, 
	122, 78, 95, 110, 35, 36, 48, 57, 
	65, 90, 97, 122, 84, 95, 116, 35, 
	36, 48, 57, 65, 90, 97, 122, 88, 
	95, 120, 35, 36, 48, 57, 65, 90, 
	97, 122, 67, 95, 99, 35, 36, 48, 
	57, 65, 90, 97, 122, 69, 95, 101, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	80, 95, 112, 35, 36, 48, 57, 65, 
	90, 97, 122, 84, 95, 116, 35, 36, 
	48, 57, 65, 90, 97, 122, 73, 95, 
	105, 35, 36, 48, 57, 65, 90, 97, 
	122, 79, 95, 111, 35, 36, 48, 57, 
	65, 90, 97, 122, 78, 95, 110, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 59, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	47, 9, 13, 32, 45, 47, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 9, 13, 34, 39, 
	39, 45, 42, 32, 34, 45, 47, 67, 
	69, 70, 80, 84, 95, 99, 101, 102, 
	112, 116, 9, 13, 35, 36, 65, 90, 
	97, 122, 0
]

class << self
	attr_accessor :_declare_single_lengths
	private :_declare_single_lengths, :_declare_single_lengths=
end
self._declare_single_lengths = [
	9, 1, 1, 1, 1, 2, 2, 3, 
	15, 1, 3, 1, 1, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	1, 1, 1, 1, 2, 4, 1, 1, 
	1, 1, 2, 6, 6, 6, 6, 6, 
	4, 9, 1, 3, 1, 1, 1, 1, 
	2, 4, 1, 1, 1, 1, 2, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 5, 1, 
	1, 1, 1, 2, 6, 6, 4, 7, 
	1, 1, 1, 1, 2, 6, 6, 6, 
	6, 6, 6, 6, 4, 9, 1, 1, 
	1, 1, 1, 2, 6, 8, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 4, 
	9, 1, 1, 1, 1, 1, 2, 6, 
	6, 6, 4, 9, 1, 3, 1, 1, 
	1, 1, 2, 4, 1, 1, 1, 1, 
	2, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	5, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	2, 15, 1, 1, 1, 1, 2, 6, 
	9, 7, 3, 3, 4, 3, 0, 1, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 5, 
	0, 1, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 4, 3, 1, 1, 1, 
	1, 1, 15
]

class << self
	attr_accessor :_declare_range_lengths
	private :_declare_range_lengths, :_declare_range_lengths=
end
self._declare_range_lengths = [
	1, 0, 0, 0, 0, 0, 0, 1, 
	4, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 5, 5, 5, 5, 5, 
	5, 4, 0, 1, 0, 0, 0, 0, 
	0, 5, 0, 0, 0, 0, 0, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 0, 
	0, 0, 0, 0, 5, 5, 5, 1, 
	0, 0, 0, 0, 0, 5, 5, 5, 
	5, 5, 5, 5, 5, 4, 0, 0, 
	0, 0, 0, 0, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	4, 0, 0, 0, 0, 0, 0, 5, 
	5, 5, 5, 4, 0, 1, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 5, 1, 0, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 5, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 5, 1, 5, 1, 0, 0, 0, 
	0, 0, 4
]

class << self
	attr_accessor :_declare_index_offsets
	private :_declare_index_offsets, :_declare_index_offsets=
end
self._declare_index_offsets = [
	0, 11, 13, 15, 17, 19, 22, 25, 
	30, 50, 52, 57, 59, 61, 63, 65, 
	68, 71, 74, 77, 80, 83, 86, 89, 
	92, 95, 98, 101, 104, 107, 110, 113, 
	119, 121, 123, 125, 127, 130, 140, 142, 
	144, 146, 148, 151, 163, 175, 187, 199, 
	211, 221, 235, 237, 242, 244, 246, 248, 
	250, 253, 263, 265, 267, 269, 271, 274, 
	286, 298, 310, 322, 334, 346, 358, 370, 
	382, 394, 406, 418, 430, 442, 454, 465, 
	467, 469, 471, 473, 476, 488, 500, 510, 
	519, 521, 523, 525, 527, 530, 542, 554, 
	566, 578, 590, 602, 614, 624, 638, 640, 
	642, 644, 646, 648, 651, 663, 677, 689, 
	701, 713, 725, 737, 749, 761, 773, 785, 
	795, 809, 811, 813, 815, 817, 819, 822, 
	834, 846, 858, 868, 882, 884, 889, 891, 
	893, 895, 897, 900, 910, 912, 914, 916, 
	918, 921, 933, 945, 957, 969, 981, 993, 
	1005, 1017, 1029, 1041, 1053, 1065, 1077, 1089, 
	1101, 1112, 1114, 1116, 1118, 1120, 1123, 1126, 
	1129, 1132, 1135, 1138, 1141, 1143, 1145, 1147, 
	1149, 1152, 1172, 1174, 1176, 1178, 1180, 1183, 
	1191, 1202, 1211, 1216, 1221, 1231, 1236, 1237, 
	1243, 1251, 1259, 1267, 1275, 1283, 1291, 1299, 
	1307, 1315, 1323, 1331, 1339, 1347, 1355, 1363, 
	1374, 1375, 1381, 1389, 1397, 1405, 1413, 1421, 
	1429, 1437, 1445, 1453, 1461, 1469, 1477, 1485, 
	1493, 1501, 1512, 1517, 1527, 1532, 1534, 1536, 
	1538, 1540, 1542
]

class << self
	attr_accessor :_declare_indicies
	private :_declare_indicies, :_declare_indicies=
end
self._declare_indicies = [
	1, 2, 3, 4, 5, 4, 4, 5, 
	4, 1, 0, 6, 0, 1, 6, 7, 
	0, 8, 7, 8, 1, 7, 9, 9, 
	0, 10, 11, 12, 10, 0, 10, 13, 
	11, 12, 15, 16, 17, 18, 19, 14, 
	15, 16, 17, 18, 19, 10, 14, 14, 
	14, 0, 21, 20, 22, 23, 24, 22, 
	0, 25, 0, 26, 25, 27, 0, 28, 
	27, 28, 26, 27, 29, 29, 0, 30, 
	30, 0, 31, 31, 0, 32, 32, 0, 
	33, 33, 0, 34, 34, 0, 35, 35, 
	0, 36, 36, 0, 37, 37, 0, 38, 
	38, 0, 39, 39, 0, 40, 40, 0, 
	41, 41, 0, 42, 42, 0, 43, 43, 
	0, 44, 45, 46, 47, 44, 0, 48, 
	0, 44, 48, 49, 0, 50, 49, 50, 
	44, 49, 22, 23, 24, 51, 22, 51, 
	51, 51, 51, 0, 52, 0, 10, 52, 
	53, 0, 54, 53, 54, 10, 53, 22, 
	23, 24, 55, 51, 55, 22, 51, 51, 
	51, 51, 0, 22, 23, 24, 56, 51, 
	56, 22, 51, 51, 51, 51, 0, 22, 
	23, 24, 57, 51, 57, 22, 51, 51, 
	51, 51, 0, 22, 23, 24, 58, 51, 
	58, 22, 51, 51, 51, 51, 0, 22, 
	23, 24, 59, 51, 59, 22, 51, 51, 
	51, 51, 0, 60, 61, 62, 51, 60, 
	51, 51, 51, 51, 0, 63, 64, 66, 
	67, 68, 69, 65, 68, 69, 63, 65, 
	65, 65, 0, 71, 70, 72, 73, 74, 
	72, 0, 75, 0, 76, 75, 77, 0, 
	78, 77, 78, 76, 77, 72, 73, 74, 
	79, 72, 79, 79, 79, 79, 0, 80, 
	0, 63, 80, 81, 0, 82, 81, 82, 
	63, 81, 72, 73, 74, 83, 79, 83, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 84, 79, 84, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 85, 79, 85, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 86, 79, 86, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 87, 79, 87, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 88, 79, 88, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 89, 79, 89, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 90, 79, 90, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 91, 79, 91, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 92, 79, 92, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 93, 79, 93, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 94, 79, 94, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 95, 79, 95, 
	72, 79, 79, 79, 79, 0, 72, 73, 
	74, 96, 79, 96, 72, 79, 79, 79, 
	79, 0, 72, 73, 74, 97, 79, 97, 
	72, 79, 79, 79, 79, 0, 98, 99, 
	100, 47, 79, 98, 79, 79, 79, 79, 
	0, 101, 0, 102, 101, 103, 0, 104, 
	103, 104, 102, 103, 22, 23, 24, 105, 
	51, 105, 22, 51, 51, 51, 51, 0, 
	22, 23, 24, 106, 51, 106, 22, 51, 
	51, 51, 51, 0, 107, 108, 109, 51, 
	107, 51, 51, 51, 51, 0, 110, 111, 
	112, 113, 114, 113, 114, 110, 0, 115, 
	0, 110, 115, 116, 0, 117, 116, 117, 
	110, 116, 22, 23, 24, 118, 51, 118, 
	22, 51, 51, 51, 51, 0, 22, 23, 
	24, 119, 51, 119, 22, 51, 51, 51, 
	51, 0, 22, 23, 24, 120, 51, 120, 
	22, 51, 51, 51, 51, 0, 22, 23, 
	24, 121, 51, 121, 22, 51, 51, 51, 
	51, 0, 22, 23, 24, 122, 51, 122, 
	22, 51, 51, 51, 51, 0, 22, 23, 
	24, 123, 51, 123, 22, 51, 51, 51, 
	51, 0, 22, 23, 24, 124, 51, 124, 
	22, 51, 51, 51, 51, 0, 125, 126, 
	127, 51, 125, 51, 51, 51, 51, 0, 
	128, 129, 131, 132, 133, 134, 130, 133, 
	134, 128, 130, 130, 130, 0, 136, 135, 
	137, 0, 128, 137, 138, 0, 139, 138, 
	139, 128, 138, 22, 23, 24, 140, 51, 
	140, 22, 51, 51, 51, 51, 0, 22, 
	23, 24, 141, 142, 51, 141, 142, 22, 
	51, 51, 51, 51, 0, 22, 23, 24, 
	143, 51, 143, 22, 51, 51, 51, 51, 
	0, 22, 23, 24, 144, 51, 144, 22, 
	51, 51, 51, 51, 0, 22, 23, 24, 
	106, 51, 106, 22, 51, 51, 51, 51, 
	0, 22, 23, 24, 145, 51, 145, 22, 
	51, 51, 51, 51, 0, 22, 23, 24, 
	146, 51, 146, 22, 51, 51, 51, 51, 
	0, 22, 23, 24, 147, 51, 147, 22, 
	51, 51, 51, 51, 0, 22, 23, 24, 
	148, 51, 148, 22, 51, 51, 51, 51, 
	0, 22, 23, 24, 149, 51, 149, 22, 
	51, 51, 51, 51, 0, 22, 23, 24, 
	150, 51, 150, 22, 51, 51, 51, 51, 
	0, 151, 152, 153, 51, 151, 51, 51, 
	51, 51, 0, 154, 155, 157, 158, 159, 
	160, 156, 159, 160, 154, 156, 156, 156, 
	0, 162, 161, 163, 0, 154, 163, 164, 
	0, 165, 164, 165, 154, 164, 22, 23, 
	24, 166, 51, 166, 22, 51, 51, 51, 
	51, 0, 22, 23, 24, 167, 51, 167, 
	22, 51, 51, 51, 51, 0, 22, 23, 
	24, 168, 51, 168, 22, 51, 51, 51, 
	51, 0, 169, 170, 171, 51, 169, 51, 
	51, 51, 51, 0, 172, 173, 175, 176, 
	177, 178, 174, 177, 178, 172, 174, 174, 
	174, 0, 180, 179, 181, 182, 183, 181, 
	0, 184, 0, 185, 184, 186, 0, 187, 
	186, 187, 185, 186, 181, 182, 183, 188, 
	181, 188, 188, 188, 188, 0, 189, 0, 
	172, 189, 190, 0, 191, 190, 191, 172, 
	190, 181, 182, 183, 192, 188, 192, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	193, 188, 193, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 194, 188, 194, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	195, 188, 195, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 196, 188, 196, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	197, 188, 197, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 198, 188, 198, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	199, 188, 199, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 200, 188, 200, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	201, 188, 201, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 202, 188, 202, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	203, 188, 203, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 204, 188, 204, 181, 
	188, 188, 188, 188, 0, 181, 182, 183, 
	205, 188, 205, 181, 188, 188, 188, 188, 
	0, 181, 182, 183, 206, 188, 206, 181, 
	188, 188, 188, 188, 0, 207, 208, 209, 
	47, 188, 207, 188, 188, 188, 188, 0, 
	210, 0, 211, 210, 212, 0, 213, 212, 
	213, 211, 212, 214, 214, 0, 215, 215, 
	0, 216, 216, 0, 217, 217, 0, 218, 
	218, 0, 9, 9, 0, 221, 220, 223, 
	222, 225, 224, 227, 226, 227, 225, 226, 
	228, 13, 229, 230, 15, 16, 17, 18, 
	19, 14, 15, 16, 17, 18, 19, 228, 
	14, 14, 14, 219, 231, 219, 228, 231, 
	232, 219, 233, 232, 233, 228, 232, 235, 
	236, 237, 238, 239, 240, 235, 234, 1, 
	2, 3, 4, 5, 4, 4, 5, 4, 
	1, 0, 26, 242, 243, 113, 114, 113, 
	114, 26, 241, 44, 45, 46, 44, 244, 
	76, 246, 247, 76, 245, 72, 73, 74, 
	79, 72, 79, 79, 79, 79, 248, 102, 
	249, 250, 102, 244, 251, 253, 253, 253, 
	253, 253, 252, 254, 253, 254, 253, 253, 
	253, 253, 251, 255, 253, 255, 253, 253, 
	253, 253, 251, 256, 253, 256, 253, 253, 
	253, 253, 251, 257, 253, 257, 253, 253, 
	253, 253, 251, 258, 253, 258, 253, 253, 
	253, 253, 251, 259, 253, 259, 253, 253, 
	253, 253, 251, 260, 253, 260, 253, 253, 
	253, 253, 251, 261, 253, 261, 253, 253, 
	253, 253, 251, 262, 253, 262, 253, 253, 
	253, 253, 251, 263, 253, 263, 253, 253, 
	253, 253, 251, 264, 253, 264, 253, 253, 
	253, 253, 251, 265, 253, 265, 253, 253, 
	253, 253, 251, 266, 253, 266, 253, 253, 
	253, 253, 251, 267, 253, 267, 253, 253, 
	253, 253, 251, 268, 253, 268, 253, 253, 
	253, 253, 251, 269, 270, 271, 272, 253, 
	269, 253, 253, 253, 253, 251, 273, 274, 
	274, 274, 274, 274, 252, 275, 274, 275, 
	274, 274, 274, 274, 273, 276, 274, 276, 
	274, 274, 274, 274, 273, 277, 274, 277, 
	274, 274, 274, 274, 273, 278, 274, 278, 
	274, 274, 274, 274, 273, 279, 274, 279, 
	274, 274, 274, 274, 273, 280, 274, 280, 
	274, 274, 274, 274, 273, 281, 274, 281, 
	274, 274, 274, 274, 273, 282, 274, 282, 
	274, 274, 274, 274, 273, 283, 274, 283, 
	274, 274, 274, 274, 273, 284, 274, 284, 
	274, 274, 274, 274, 273, 285, 274, 285, 
	274, 274, 274, 274, 273, 286, 274, 286, 
	274, 274, 274, 274, 273, 287, 274, 287, 
	274, 274, 274, 274, 273, 288, 274, 288, 
	274, 274, 274, 274, 273, 289, 274, 289, 
	274, 274, 274, 274, 273, 269, 270, 271, 
	272, 274, 269, 274, 274, 274, 274, 273, 
	185, 291, 292, 185, 290, 181, 182, 183, 
	188, 181, 188, 188, 188, 188, 248, 211, 
	293, 294, 211, 244, 221, 220, 223, 222, 
	222, 296, 224, 295, 226, 295, 228, 13, 
	229, 230, 15, 16, 17, 18, 19, 14, 
	15, 16, 17, 18, 19, 228, 14, 14, 
	14, 295, 0
]

class << self
	attr_accessor :_declare_trans_targs
	private :_declare_trans_targs, :_declare_trans_targs=
end
self._declare_trans_targs = [
	183, 0, 1, 3, 6, 166, 2, 4, 
	5, 7, 8, 38, 40, 9, 37, 43, 
	84, 93, 108, 127, 9, 10, 185, 11, 
	13, 12, 185, 14, 15, 17, 18, 19, 
	20, 21, 22, 183, 24, 25, 26, 27, 
	28, 29, 30, 31, 186, 32, 34, 183, 
	33, 35, 36, 37, 39, 41, 42, 44, 
	45, 46, 47, 48, 49, 58, 60, 49, 
	50, 57, 58, 60, 63, 70, 50, 51, 
	187, 52, 54, 53, 187, 55, 56, 57, 
	59, 61, 62, 64, 65, 66, 67, 68, 
	69, 188, 71, 72, 73, 74, 75, 76, 
	77, 78, 189, 79, 81, 80, 189, 82, 
	83, 85, 86, 87, 88, 90, 87, 88, 
	90, 16, 23, 89, 91, 92, 94, 95, 
	96, 97, 98, 99, 100, 101, 103, 105, 
	101, 102, 191, 103, 105, 192, 199, 102, 
	190, 104, 106, 107, 109, 110, 113, 111, 
	112, 114, 115, 116, 117, 118, 119, 120, 
	122, 124, 120, 121, 209, 122, 124, 210, 
	217, 121, 208, 123, 125, 126, 128, 129, 
	130, 131, 140, 142, 131, 132, 139, 140, 
	142, 145, 152, 132, 133, 226, 134, 136, 
	135, 226, 137, 138, 139, 141, 143, 144, 
	146, 147, 148, 149, 150, 151, 227, 153, 
	154, 155, 156, 157, 158, 159, 160, 228, 
	161, 163, 162, 228, 164, 165, 167, 168, 
	169, 170, 171, 183, 172, 183, 173, 231, 
	174, 184, 175, 176, 177, 178, 180, 179, 
	181, 182, 183, 184, 229, 230, 232, 233, 
	234, 183, 11, 13, 183, 183, 52, 54, 
	183, 79, 81, 183, 183, 191, 193, 194, 
	195, 196, 197, 198, 191, 200, 201, 202, 
	203, 204, 205, 206, 207, 186, 32, 34, 
	183, 183, 209, 211, 212, 213, 214, 215, 
	216, 209, 218, 219, 220, 221, 222, 223, 
	224, 225, 183, 134, 136, 161, 163, 183, 
	183
]

class << self
	attr_accessor :_declare_trans_actions
	private :_declare_trans_actions, :_declare_trans_actions=
end
self._declare_trans_actions = [
	35, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 95, 3, 
	3, 0, 64, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 55, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	87, 3, 3, 0, 58, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 52, 0, 0, 0, 0, 0, 0, 
	0, 0, 99, 3, 3, 0, 55, 0, 
	0, 0, 0, 3, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	0, 1, 79, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 0, 1, 83, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 91, 3, 3, 
	0, 61, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 52, 0, 
	0, 0, 0, 0, 0, 0, 0, 99, 
	3, 3, 0, 55, 0, 0, 0, 0, 
	0, 0, 0, 33, 0, 11, 0, 46, 
	0, 49, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 73, 9, 73, 9, 9, 
	73, 29, 0, 0, 23, 25, 0, 0, 
	21, 0, 0, 37, 43, 67, 0, 0, 
	0, 0, 0, 0, 52, 0, 0, 0, 
	0, 0, 0, 0, 67, 99, 3, 3, 
	76, 40, 70, 0, 0, 0, 0, 0, 
	0, 52, 0, 0, 0, 0, 0, 0, 
	0, 70, 27, 0, 0, 0, 0, 31, 
	19
]

class << self
	attr_accessor :_declare_to_state_actions
	private :_declare_to_state_actions, :_declare_to_state_actions=
end
self._declare_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_declare_from_state_actions
	private :_declare_from_state_actions, :_declare_from_state_actions=
end
self._declare_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_declare_eof_trans
	private :_declare_eof_trans, :_declare_eof_trans=
end
self._declare_eof_trans = [
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 220, 1, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 0, 
	1, 242, 245, 246, 249, 245, 252, 253, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	274, 253, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 291, 249, 245, 296, 296, 297, 
	296, 296, 296
]

class << self
	attr_accessor :declare_start
end
self.declare_start = 183;
class << self
	attr_accessor :declare_first_final
end
self.declare_first_final = 183;
class << self
	attr_accessor :declare_error
end
self.declare_error = -1;

class << self
	attr_accessor :declare_en_main
end
self.declare_en_main = 183;


# line 68 "lib/vorax/parser/grammars/declare.rl"
          
# line 867 "lib/vorax/parser/grammars/declare.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = declare_start
	ts = nil
	te = nil
	act = 0
end

# line 69 "lib/vorax/parser/grammars/declare.rl"
          
# line 879 "lib/vorax/parser/grammars/declare.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	end
	if _goto_level <= _resume
	_acts = _declare_from_state_actions[cs]
	_nacts = _declare_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _declare_actions[_acts - 1]
			when 3 then
# line 1 "NONE"
		begin
ts = p
		end
# line 909 "lib/vorax/parser/grammars/declare.rb"
		end # from state action switch
	end
	if _trigger_goto
		next
	end
	_keys = _declare_key_offsets[cs]
	_trans = _declare_index_offsets[cs]
	_klen = _declare_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _declare_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _declare_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _declare_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _declare_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _declare_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _declare_indicies[_trans]
	end
	if _goto_level <= _eof_trans
	cs = _declare_trans_targs[_trans]
	if _declare_trans_actions[_trans] != 0
		_acts = _declare_trans_actions[_trans]
		_nacts = _declare_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _declare_actions[_acts - 1]
when 0 then
# line 7 "lib/vorax/parser/grammars/declare.rl"
		begin

  @start = p
		end
when 1 then
# line 11 "lib/vorax/parser/grammars/declare.rl"
		begin

  @end = p - 1
		end
when 4 then
# line 1 "NONE"
		begin
te = p+1
		end
when 5 then
# line 28 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 1;		end
when 6 then
# line 30 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 3;		end
when 7 then
# line 31 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 4;		end
when 8 then
# line 32 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 5;		end
when 9 then
# line 33 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 6;		end
when 10 then
# line 34 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 7;		end
when 11 then
# line 35 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 8;		end
when 12 then
# line 36 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 9;		end
when 13 then
# line 37 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 10;		end
when 14 then
# line 38 "lib/vorax/parser/grammars/declare.rl"
		begin
act = 11;		end
when 15 then
# line 29 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p+1
		end
when 16 then
# line 31 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p+1
 begin  @constants.add(data[(@start..@end)])  end
		end
when 17 then
# line 32 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p+1
 begin  @exceptions.add(data[(@start..@end)])  end
		end
when 18 then
# line 38 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p+1
		end
when 19 then
# line 28 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1;		end
when 20 then
# line 31 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @constants.add(data[(@start..@end)])  end
		end
when 21 then
# line 32 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @exceptions.add(data[(@start..@end)])  end
		end
when 22 then
# line 33 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @cursors.add(data[(@start..@end)])  end
		end
when 23 then
# line 34 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @types.add(data[(@start..@end)])  end
		end
when 24 then
# line 35 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @variables.add(data[(@start..@end)])  end
		end
when 25 then
# line 36 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @functions.add(data[(@start..@end)])  end
		end
when 26 then
# line 37 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1; begin  @procedures.add(data[(@start..@end)])  end
		end
when 27 then
# line 38 "lib/vorax/parser/grammars/declare.rl"
		begin
te = p
p = p - 1;		end
when 28 then
# line 38 "lib/vorax/parser/grammars/declare.rl"
		begin
 begin p = ((te))-1; end
		end
when 29 then
# line 1 "NONE"
		begin
	case act
	when 4 then
	begin begin p = ((te))-1; end
 @constants.add(data[(@start..@end)]) end
	when 5 then
	begin begin p = ((te))-1; end
 @exceptions.add(data[(@start..@end)]) end
	when 6 then
	begin begin p = ((te))-1; end
 @cursors.add(data[(@start..@end)]) end
	when 7 then
	begin begin p = ((te))-1; end
 @types.add(data[(@start..@end)]) end
	when 8 then
	begin begin p = ((te))-1; end
 @variables.add(data[(@start..@end)]) end
	when 9 then
	begin begin p = ((te))-1; end
 @functions.add(data[(@start..@end)]) end
	when 10 then
	begin begin p = ((te))-1; end
 @procedures.add(data[(@start..@end)]) end
	when 11 then
	begin begin p = ((te))-1; end
end
	else
	begin begin p = ((te))-1; end
end
end 
			end
# line 1145 "lib/vorax/parser/grammars/declare.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	_acts = _declare_to_state_actions[cs]
	_nacts = _declare_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _declare_actions[_acts - 1]
when 2 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 1165 "lib/vorax/parser/grammars/declare.rb"
		end # to state action switch
	end
	if _trigger_goto
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _declare_eof_trans[cs] > 0
		_trans = _declare_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 70 "lib/vorax/parser/grammars/declare.rl"
        end
      end

    end

  end

end


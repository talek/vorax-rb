
# line 1 "lib/vorax/parser/grammars/subprog.rl"

# line 44 "lib/vorax/parser/grammars/subprog.rl"


module Vorax

	module Parser

		module SubprogInspector

			def describe_subprog(data)
				@args = []
				@name = nil
				@kind = nil
				@return_type = nil
				@end_def = nil
				if data
				  data << ' '
					eof = data.length
					
# line 24 "lib/vorax/parser/grammars/subprog.rb"
class << self
	attr_accessor :_subprog_actions
	private :_subprog_actions, :_subprog_actions=
end
self._subprog_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 2, 3, 1, 2, 4, 
	10, 2, 5, 10, 2, 6, 10, 2, 
	10, 0, 2, 12, 1
]

class << self
	attr_accessor :_subprog_key_offsets
	private :_subprog_key_offsets, :_subprog_key_offsets=
end
self._subprog_key_offsets = [
	0, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 23, 36, 37, 44, 52, 65, 
	66, 71, 90, 91, 100, 110, 115, 122, 
	123, 124, 125, 126, 128, 130, 132, 134, 
	136, 138, 143, 156, 157, 165, 169, 171, 
	173, 175, 177, 179, 181, 187, 188, 189, 
	190, 191, 193, 201, 202, 210, 218, 219, 
	226, 242, 259, 276, 277, 278, 279, 280, 
	282, 283, 284, 285, 286, 288, 289, 296, 
	303, 304, 305, 306, 307, 309, 311, 313, 
	315, 317, 319, 321, 325, 327, 329, 331, 
	333, 335, 337, 344, 352, 353, 362, 370, 
	371, 379, 396, 414, 432, 433, 434, 435, 
	436, 438, 458, 476, 498, 499, 500, 501, 
	502, 504, 524, 544, 564, 584, 604, 624, 
	642, 662, 682, 702, 722, 742, 760, 778, 
	779, 780, 781, 782, 784, 804, 824, 842, 
	862, 863, 864, 865, 866, 868, 888, 908, 
	926, 940, 941, 942, 943, 944, 946, 947, 
	948, 949, 950, 952, 960, 961, 968, 976, 
	977, 983, 998, 1014, 1030, 1031, 1032, 1033, 
	1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 
	1050, 1052, 1057, 1070, 1071, 1079, 1085, 1098, 
	1099, 1104, 1123, 1124, 1133, 1143, 1149, 1150, 
	1151, 1152, 1153, 1155, 1156, 1163, 1170, 1171, 
	1172, 1173, 1174, 1176, 1178, 1180, 1182, 1184, 
	1186, 1188, 1192, 1194, 1196, 1198, 1200, 1202, 
	1204, 1211, 1219, 1220, 1229, 1237, 1238, 1246, 
	1263, 1281, 1299, 1300, 1301, 1302, 1303, 1305, 
	1325, 1343, 1365, 1366, 1367, 1368, 1369, 1371, 
	1391, 1411, 1431, 1451, 1471, 1491, 1509, 1529, 
	1549, 1569, 1589, 1609, 1627, 1645, 1646, 1647, 
	1648, 1649, 1651, 1671, 1691, 1709, 1729, 1730, 
	1731, 1732, 1733, 1735, 1755, 1775, 1793, 1807, 
	1808, 1809, 1810, 1811, 1813, 1814, 1815, 1816, 
	1817, 1819, 1820, 1821, 1829, 1830, 1838, 1846, 
	1847, 1854, 1855, 1856, 1858, 1874, 1891, 1908, 
	1909, 1910, 1911, 1912, 1914, 1914
]

class << self
	attr_accessor :_subprog_trans_keys
	private :_subprog_trans_keys, :_subprog_trans_keys=
end
self._subprog_trans_keys = [
	70, 80, 102, 112, 85, 117, 78, 110, 
	67, 99, 84, 116, 73, 105, 79, 111, 
	78, 110, 32, 45, 47, 9, 13, 32, 
	34, 45, 47, 95, 9, 13, 35, 36, 
	65, 90, 97, 122, 34, 32, 40, 45, 
	46, 47, 9, 13, 32, 40, 45, 47, 
	82, 114, 9, 13, 32, 34, 45, 47, 
	95, 9, 13, 35, 36, 65, 90, 97, 
	122, 34, 32, 45, 47, 9, 13, 32, 
	34, 45, 47, 73, 78, 79, 95, 105, 
	110, 111, 9, 13, 35, 36, 65, 90, 
	97, 122, 34, 32, 37, 41, 44, 45, 
	46, 47, 9, 13, 32, 41, 44, 45, 
	47, 58, 68, 100, 9, 13, 32, 45, 
	47, 9, 13, 32, 45, 47, 82, 114, 
	9, 13, 45, 10, 42, 42, 42, 47, 
	69, 101, 84, 116, 85, 117, 82, 114, 
	78, 110, 32, 45, 47, 9, 13, 32, 
	34, 45, 47, 95, 9, 13, 35, 36, 
	65, 90, 97, 122, 34, 32, 37, 45, 
	46, 47, 59, 9, 13, 82, 84, 114, 
	116, 79, 111, 87, 119, 84, 116, 89, 
	121, 80, 112, 69, 101, 32, 45, 47, 
	59, 9, 13, 45, 10, 42, 42, 42, 
	47, 34, 95, 35, 36, 65, 90, 97, 
	122, 34, 32, 37, 45, 46, 47, 59, 
	9, 13, 34, 95, 35, 36, 65, 90, 
	97, 122, 34, 32, 37, 45, 47, 59, 
	9, 13, 32, 37, 45, 47, 59, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 37, 45, 46, 47, 59, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 45, 46, 47, 
	59, 95, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 45, 10, 42, 42, 
	42, 47, 45, 10, 42, 42, 42, 47, 
	61, 32, 41, 44, 45, 47, 9, 13, 
	32, 41, 44, 45, 47, 9, 13, 45, 
	10, 42, 42, 42, 47, 69, 101, 70, 
	102, 65, 97, 85, 117, 76, 108, 84, 
	116, 82, 84, 114, 116, 79, 111, 87, 
	119, 84, 116, 89, 121, 80, 112, 69, 
	101, 32, 41, 44, 45, 47, 9, 13, 
	34, 95, 35, 36, 65, 90, 97, 122, 
	34, 32, 37, 41, 44, 45, 46, 47, 
	9, 13, 34, 95, 35, 36, 65, 90, 
	97, 122, 34, 32, 37, 41, 44, 45, 
	47, 9, 13, 32, 37, 41, 44, 45, 
	47, 95, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 37, 41, 44, 
	45, 46, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 37, 
	41, 44, 45, 46, 47, 95, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	45, 10, 42, 42, 42, 47, 32, 37, 
	41, 44, 45, 46, 47, 78, 95, 110, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 37, 41, 44, 45, 46, 
	47, 95, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 34, 41, 44, 
	45, 47, 58, 68, 78, 79, 95, 100, 
	110, 111, 9, 13, 35, 36, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	32, 37, 41, 44, 45, 46, 47, 69, 
	95, 101, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 37, 41, 44, 
	45, 46, 47, 70, 95, 102, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 37, 41, 44, 45, 46, 47, 65, 
	95, 97, 9, 13, 35, 36, 48, 57, 
	66, 90, 98, 122, 32, 37, 41, 44, 
	45, 46, 47, 85, 95, 117, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 37, 41, 44, 45, 46, 47, 76, 
	95, 108, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 37, 41, 44, 
	45, 46, 47, 84, 95, 116, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 37, 41, 44, 45, 46, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 37, 41, 44, 45, 46, 
	47, 79, 95, 111, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 37, 
	41, 44, 45, 46, 47, 67, 95, 99, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 37, 41, 44, 45, 46, 
	47, 79, 95, 111, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 37, 
	41, 44, 45, 46, 47, 80, 95, 112, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 37, 41, 44, 45, 46, 
	47, 89, 95, 121, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 37, 
	41, 44, 45, 46, 47, 95, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 34, 41, 44, 45, 47, 58, 68, 
	95, 100, 9, 13, 35, 36, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	32, 37, 41, 44, 45, 46, 47, 85, 
	95, 117, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 37, 41, 44, 
	45, 46, 47, 84, 95, 116, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 37, 41, 44, 45, 46, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 34, 41, 44, 45, 47, 
	58, 68, 78, 95, 100, 110, 9, 13, 
	35, 36, 65, 90, 97, 122, 45, 10, 
	42, 42, 42, 47, 32, 37, 41, 44, 
	45, 46, 47, 85, 95, 117, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	32, 37, 41, 44, 45, 46, 47, 84, 
	95, 116, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 32, 37, 41, 44, 
	45, 46, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	47, 95, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 45, 10, 42, 42, 
	42, 47, 45, 10, 42, 42, 42, 47, 
	34, 95, 35, 36, 65, 90, 97, 122, 
	34, 32, 40, 45, 46, 47, 9, 13, 
	34, 95, 35, 36, 65, 90, 97, 122, 
	34, 32, 40, 45, 47, 9, 13, 32, 
	40, 45, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 40, 
	45, 46, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 40, 
	45, 46, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 45, 10, 
	42, 42, 42, 47, 82, 114, 79, 111, 
	67, 99, 69, 101, 68, 100, 85, 117, 
	82, 114, 69, 101, 32, 45, 47, 9, 
	13, 32, 34, 45, 47, 95, 9, 13, 
	35, 36, 65, 90, 97, 122, 34, 32, 
	40, 45, 46, 47, 59, 9, 13, 32, 
	40, 45, 47, 9, 13, 32, 34, 45, 
	47, 95, 9, 13, 35, 36, 65, 90, 
	97, 122, 34, 32, 45, 47, 9, 13, 
	32, 34, 45, 47, 73, 78, 79, 95, 
	105, 110, 111, 9, 13, 35, 36, 65, 
	90, 97, 122, 34, 32, 37, 41, 44, 
	45, 46, 47, 9, 13, 32, 41, 44, 
	45, 47, 58, 68, 100, 9, 13, 32, 
	45, 47, 59, 9, 13, 45, 10, 42, 
	42, 42, 47, 61, 32, 41, 44, 45, 
	47, 9, 13, 32, 41, 44, 45, 47, 
	9, 13, 45, 10, 42, 42, 42, 47, 
	69, 101, 70, 102, 65, 97, 85, 117, 
	76, 108, 84, 116, 82, 84, 114, 116, 
	79, 111, 87, 119, 84, 116, 89, 121, 
	80, 112, 69, 101, 32, 41, 44, 45, 
	47, 9, 13, 34, 95, 35, 36, 65, 
	90, 97, 122, 34, 32, 37, 41, 44, 
	45, 46, 47, 9, 13, 34, 95, 35, 
	36, 65, 90, 97, 122, 34, 32, 37, 
	41, 44, 45, 47, 9, 13, 32, 37, 
	41, 44, 45, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	37, 41, 44, 45, 46, 47, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 37, 41, 44, 45, 46, 47, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 45, 10, 42, 42, 42, 
	47, 32, 37, 41, 44, 45, 46, 47, 
	78, 95, 110, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 37, 41, 
	44, 45, 46, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	34, 41, 44, 45, 47, 58, 68, 78, 
	79, 95, 100, 110, 111, 9, 13, 35, 
	36, 65, 90, 97, 122, 45, 10, 42, 
	42, 42, 47, 32, 37, 41, 44, 45, 
	46, 47, 69, 95, 101, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	37, 41, 44, 45, 46, 47, 70, 95, 
	102, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 41, 44, 45, 
	46, 47, 65, 95, 97, 9, 13, 35, 
	36, 48, 57, 66, 90, 98, 122, 32, 
	37, 41, 44, 45, 46, 47, 85, 95, 
	117, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 41, 44, 45, 
	46, 47, 76, 95, 108, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	37, 41, 44, 45, 46, 47, 84, 95, 
	116, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 41, 44, 45, 
	46, 47, 95, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 37, 41, 
	44, 45, 46, 47, 79, 95, 111, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 37, 41, 44, 45, 46, 47, 
	67, 95, 99, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 37, 41, 
	44, 45, 46, 47, 79, 95, 111, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 37, 41, 44, 45, 46, 47, 
	80, 95, 112, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 37, 41, 
	44, 45, 46, 47, 89, 95, 121, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 37, 41, 44, 45, 46, 47, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 34, 41, 44, 45, 
	47, 58, 68, 95, 100, 9, 13, 35, 
	36, 65, 90, 97, 122, 45, 10, 42, 
	42, 42, 47, 32, 37, 41, 44, 45, 
	46, 47, 85, 95, 117, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	37, 41, 44, 45, 46, 47, 84, 95, 
	116, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 41, 44, 45, 
	46, 47, 95, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 34, 41, 
	44, 45, 47, 58, 68, 78, 95, 100, 
	110, 9, 13, 35, 36, 65, 90, 97, 
	122, 45, 10, 42, 42, 42, 47, 32, 
	37, 41, 44, 45, 46, 47, 85, 95, 
	117, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 37, 41, 44, 45, 
	46, 47, 84, 95, 116, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	37, 41, 44, 45, 46, 47, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 45, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 45, 
	10, 42, 42, 42, 47, 45, 10, 42, 
	42, 42, 47, 45, 10, 34, 95, 35, 
	36, 65, 90, 97, 122, 34, 32, 40, 
	45, 46, 47, 59, 9, 13, 34, 95, 
	35, 36, 65, 90, 97, 122, 34, 32, 
	40, 45, 47, 59, 9, 13, 42, 42, 
	42, 47, 32, 40, 45, 47, 59, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 40, 45, 46, 47, 59, 
	95, 9, 13, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 40, 45, 46, 47, 
	59, 95, 9, 13, 35, 36, 48, 57, 
	65, 90, 97, 122, 45, 10, 42, 42, 
	42, 47, 32, 40, 45, 47, 9, 13, 
	0
]

class << self
	attr_accessor :_subprog_single_lengths
	private :_subprog_single_lengths, :_subprog_single_lengths=
end
self._subprog_single_lengths = [
	0, 4, 2, 2, 2, 2, 2, 2, 
	2, 3, 5, 1, 5, 6, 5, 1, 
	3, 11, 1, 7, 8, 3, 5, 1, 
	1, 1, 1, 2, 2, 2, 2, 2, 
	2, 3, 5, 1, 6, 4, 2, 2, 
	2, 2, 2, 2, 4, 1, 1, 1, 
	1, 2, 2, 1, 6, 2, 1, 5, 
	6, 7, 7, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 5, 5, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 5, 2, 1, 7, 2, 1, 
	6, 7, 8, 8, 1, 1, 1, 1, 
	2, 10, 8, 14, 1, 1, 1, 1, 
	2, 10, 10, 10, 10, 10, 10, 8, 
	10, 10, 10, 10, 10, 8, 10, 1, 
	1, 1, 1, 2, 10, 10, 8, 12, 
	1, 1, 1, 1, 2, 10, 10, 8, 
	4, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 2, 1, 5, 2, 1, 
	4, 5, 6, 6, 1, 1, 1, 1, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 5, 1, 6, 4, 5, 1, 
	3, 11, 1, 7, 8, 4, 1, 1, 
	1, 1, 2, 1, 5, 5, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	5, 2, 1, 7, 2, 1, 6, 7, 
	8, 8, 1, 1, 1, 1, 2, 10, 
	8, 14, 1, 1, 1, 1, 2, 10, 
	10, 10, 10, 10, 10, 8, 10, 10, 
	10, 10, 10, 8, 10, 1, 1, 1, 
	1, 2, 10, 10, 8, 12, 1, 1, 
	1, 1, 2, 10, 10, 8, 4, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 2, 1, 6, 2, 1, 
	5, 1, 1, 2, 6, 7, 7, 1, 
	1, 1, 1, 2, 0, 4
]

class << self
	attr_accessor :_subprog_range_lengths
	private :_subprog_range_lengths, :_subprog_range_lengths=
end
self._subprog_range_lengths = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 4, 0, 1, 1, 4, 0, 
	1, 4, 0, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 4, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 3, 0, 1, 3, 0, 1, 
	5, 5, 5, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 3, 0, 1, 3, 0, 
	1, 5, 5, 5, 0, 0, 0, 0, 
	0, 5, 5, 4, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 4, 0, 
	0, 0, 0, 0, 5, 5, 5, 4, 
	0, 0, 0, 0, 0, 5, 5, 5, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 1, 3, 0, 
	1, 5, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 4, 0, 1, 1, 4, 0, 
	1, 4, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 1, 3, 0, 1, 5, 
	5, 5, 0, 0, 0, 0, 0, 5, 
	5, 4, 0, 0, 0, 0, 0, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 4, 0, 0, 0, 
	0, 0, 5, 5, 5, 4, 0, 0, 
	0, 0, 0, 5, 5, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 1, 3, 0, 
	1, 0, 0, 0, 5, 5, 5, 0, 
	0, 0, 0, 0, 0, 1
]

class << self
	attr_accessor :_subprog_index_offsets
	private :_subprog_index_offsets, :_subprog_index_offsets=
end
self._subprog_index_offsets = [
	0, 0, 5, 8, 11, 14, 17, 20, 
	23, 26, 31, 41, 43, 50, 58, 68, 
	70, 75, 91, 93, 102, 112, 117, 124, 
	126, 128, 130, 132, 135, 138, 141, 144, 
	147, 150, 155, 165, 167, 175, 180, 183, 
	186, 189, 192, 195, 198, 204, 206, 208, 
	210, 212, 215, 221, 223, 231, 237, 239, 
	246, 258, 271, 284, 286, 288, 290, 292, 
	295, 297, 299, 301, 303, 306, 308, 315, 
	322, 324, 326, 328, 330, 333, 336, 339, 
	342, 345, 348, 351, 356, 359, 362, 365, 
	368, 371, 374, 381, 387, 389, 398, 404, 
	406, 414, 427, 441, 455, 457, 459, 461, 
	463, 466, 482, 496, 515, 517, 519, 521, 
	523, 526, 542, 558, 574, 590, 606, 622, 
	636, 652, 668, 684, 700, 716, 730, 745, 
	747, 749, 751, 753, 756, 772, 788, 802, 
	819, 821, 823, 825, 827, 830, 846, 862, 
	876, 886, 888, 890, 892, 894, 897, 899, 
	901, 903, 905, 908, 914, 916, 923, 929, 
	931, 937, 948, 960, 972, 974, 976, 978, 
	980, 983, 986, 989, 992, 995, 998, 1001, 
	1004, 1007, 1012, 1022, 1024, 1032, 1038, 1048, 
	1050, 1055, 1071, 1073, 1082, 1092, 1098, 1100, 
	1102, 1104, 1106, 1109, 1111, 1118, 1125, 1127, 
	1129, 1131, 1133, 1136, 1139, 1142, 1145, 1148, 
	1151, 1154, 1159, 1162, 1165, 1168, 1171, 1174, 
	1177, 1184, 1190, 1192, 1201, 1207, 1209, 1217, 
	1230, 1244, 1258, 1260, 1262, 1264, 1266, 1269, 
	1285, 1299, 1318, 1320, 1322, 1324, 1326, 1329, 
	1345, 1361, 1377, 1393, 1409, 1425, 1439, 1455, 
	1471, 1487, 1503, 1519, 1533, 1548, 1550, 1552, 
	1554, 1556, 1559, 1575, 1591, 1605, 1622, 1624, 
	1626, 1628, 1630, 1633, 1649, 1665, 1679, 1689, 
	1691, 1693, 1695, 1697, 1700, 1702, 1704, 1706, 
	1708, 1711, 1713, 1715, 1721, 1723, 1731, 1737, 
	1739, 1746, 1748, 1750, 1753, 1765, 1778, 1791, 
	1793, 1795, 1797, 1799, 1802, 1803
]

class << self
	attr_accessor :_subprog_trans_targs
	private :_subprog_trans_targs, :_subprog_trans_targs=
end
self._subprog_trans_targs = [
	2, 169, 2, 169, 0, 3, 3, 0, 
	4, 4, 0, 5, 5, 0, 6, 6, 
	0, 7, 7, 0, 8, 8, 0, 9, 
	9, 0, 10, 164, 166, 10, 0, 10, 
	11, 164, 166, 163, 10, 163, 163, 163, 
	0, 12, 11, 13, 14, 150, 155, 152, 
	13, 0, 13, 14, 150, 152, 28, 28, 
	13, 0, 14, 15, 145, 147, 144, 14, 
	144, 144, 144, 0, 16, 15, 17, 100, 
	102, 17, 0, 17, 18, 100, 102, 105, 
	120, 141, 99, 105, 120, 141, 17, 99, 
	99, 99, 0, 19, 18, 20, 83, 21, 
	14, 64, 91, 66, 20, 0, 20, 21, 
	14, 64, 66, 69, 77, 77, 20, 0, 
	22, 23, 25, 22, 0, 22, 23, 25, 
	28, 28, 22, 0, 24, 0, 22, 24, 
	26, 0, 27, 26, 27, 22, 26, 29, 
	29, 0, 30, 30, 0, 31, 31, 0, 
	32, 32, 0, 33, 33, 0, 34, 59, 
	61, 34, 0, 34, 35, 59, 61, 58, 
	34, 58, 58, 58, 0, 36, 35, 300, 
	37, 45, 50, 47, 300, 300, 0, 38, 
	41, 38, 41, 0, 39, 39, 0, 40, 
	40, 0, 41, 41, 0, 42, 42, 0, 
	43, 43, 0, 44, 44, 0, 300, 45, 
	47, 300, 300, 0, 46, 0, 300, 46, 
	48, 0, 49, 48, 49, 300, 48, 51, 
	57, 57, 57, 57, 0, 52, 51, 300, 
	37, 45, 53, 47, 300, 300, 0, 54, 
	56, 56, 56, 56, 0, 55, 54, 300, 
	37, 45, 47, 300, 300, 0, 300, 37, 
	45, 47, 300, 56, 300, 56, 56, 56, 
	56, 0, 300, 37, 45, 53, 47, 300, 
	57, 300, 57, 57, 57, 57, 0, 300, 
	37, 45, 50, 47, 300, 58, 300, 58, 
	58, 58, 58, 0, 60, 0, 34, 60, 
	62, 0, 63, 62, 63, 34, 62, 65, 
	0, 20, 65, 67, 0, 68, 67, 68, 
	20, 67, 70, 0, 71, 21, 14, 72, 
	74, 71, 0, 71, 21, 14, 72, 74, 
	71, 0, 73, 0, 71, 73, 75, 0, 
	76, 75, 76, 71, 75, 78, 78, 0, 
	79, 79, 0, 80, 80, 0, 81, 81, 
	0, 82, 82, 0, 70, 70, 0, 84, 
	87, 84, 87, 0, 85, 85, 0, 86, 
	86, 0, 87, 87, 0, 88, 88, 0, 
	89, 89, 0, 90, 90, 0, 20, 21, 
	14, 64, 66, 20, 0, 92, 98, 98, 
	98, 98, 0, 93, 92, 20, 83, 21, 
	14, 64, 94, 66, 20, 0, 95, 97, 
	97, 97, 97, 0, 96, 95, 20, 83, 
	21, 14, 64, 66, 20, 0, 20, 83, 
	21, 14, 64, 66, 97, 20, 97, 97, 
	97, 97, 0, 20, 83, 21, 14, 64, 
	94, 66, 98, 20, 98, 98, 98, 98, 
	0, 20, 83, 21, 14, 64, 91, 66, 
	99, 20, 99, 99, 99, 99, 0, 101, 
	0, 17, 101, 103, 0, 104, 103, 104, 
	17, 103, 20, 83, 21, 14, 64, 91, 
	66, 106, 99, 106, 20, 99, 99, 99, 
	99, 0, 107, 83, 21, 14, 108, 91, 
	110, 99, 107, 99, 99, 99, 99, 0, 
	107, 18, 21, 14, 108, 110, 69, 113, 
	120, 132, 99, 113, 120, 132, 107, 99, 
	99, 99, 0, 109, 0, 107, 109, 111, 
	0, 112, 111, 112, 107, 111, 20, 83, 
	21, 14, 64, 91, 66, 114, 99, 114, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 115, 99, 115, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 116, 99, 116, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 117, 99, 117, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 118, 99, 118, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 119, 99, 119, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 99, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 121, 99, 121, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 122, 99, 122, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 123, 99, 123, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 124, 99, 124, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 125, 99, 125, 20, 99, 
	99, 99, 99, 0, 126, 83, 21, 14, 
	127, 91, 129, 99, 126, 99, 99, 99, 
	99, 0, 126, 18, 21, 14, 127, 129, 
	69, 113, 99, 113, 126, 99, 99, 99, 
	0, 128, 0, 126, 128, 130, 0, 131, 
	130, 131, 126, 130, 20, 83, 21, 14, 
	64, 91, 66, 133, 99, 133, 20, 99, 
	99, 99, 99, 0, 20, 83, 21, 14, 
	64, 91, 66, 134, 99, 134, 20, 99, 
	99, 99, 99, 0, 135, 83, 21, 14, 
	136, 91, 138, 99, 135, 99, 99, 99, 
	99, 0, 135, 18, 21, 14, 136, 138, 
	69, 113, 120, 99, 113, 120, 135, 99, 
	99, 99, 0, 137, 0, 135, 137, 139, 
	0, 140, 139, 140, 135, 139, 20, 83, 
	21, 14, 64, 91, 66, 142, 99, 142, 
	20, 99, 99, 99, 99, 0, 20, 83, 
	21, 14, 64, 91, 66, 143, 99, 143, 
	20, 99, 99, 99, 99, 0, 135, 83, 
	21, 14, 136, 91, 138, 99, 135, 99, 
	99, 99, 99, 0, 17, 100, 102, 144, 
	17, 144, 144, 144, 144, 0, 146, 0, 
	14, 146, 148, 0, 149, 148, 149, 14, 
	148, 151, 0, 13, 151, 153, 0, 154, 
	153, 154, 13, 153, 156, 162, 162, 162, 
	162, 0, 157, 156, 13, 14, 150, 158, 
	152, 13, 0, 159, 161, 161, 161, 161, 
	0, 160, 159, 13, 14, 150, 152, 13, 
	0, 13, 14, 150, 152, 161, 13, 161, 
	161, 161, 161, 0, 13, 14, 150, 158, 
	152, 162, 13, 162, 162, 162, 162, 0, 
	13, 14, 150, 155, 152, 163, 13, 163, 
	163, 163, 163, 0, 165, 0, 10, 165, 
	167, 0, 168, 167, 168, 10, 167, 170, 
	170, 0, 171, 171, 0, 172, 172, 0, 
	173, 173, 0, 174, 174, 0, 175, 175, 
	0, 176, 176, 0, 177, 177, 0, 178, 
	295, 297, 178, 0, 178, 179, 295, 297, 
	294, 178, 294, 294, 294, 0, 180, 179, 
	301, 182, 281, 283, 289, 300, 301, 0, 
	181, 182, 276, 278, 181, 0, 182, 183, 
	271, 273, 270, 182, 270, 270, 270, 0, 
	184, 183, 185, 226, 228, 185, 0, 185, 
	186, 226, 228, 231, 246, 267, 225, 231, 
	246, 267, 185, 225, 225, 225, 0, 187, 
	186, 188, 209, 189, 182, 190, 217, 192, 
	188, 0, 188, 189, 182, 190, 192, 195, 
	203, 203, 188, 0, 300, 45, 47, 300, 
	300, 0, 191, 0, 188, 191, 193, 0, 
	194, 193, 194, 188, 193, 196, 0, 197, 
	189, 182, 198, 200, 197, 0, 197, 189, 
	182, 198, 200, 197, 0, 199, 0, 197, 
	199, 201, 0, 202, 201, 202, 197, 201, 
	204, 204, 0, 205, 205, 0, 206, 206, 
	0, 207, 207, 0, 208, 208, 0, 196, 
	196, 0, 210, 213, 210, 213, 0, 211, 
	211, 0, 212, 212, 0, 213, 213, 0, 
	214, 214, 0, 215, 215, 0, 216, 216, 
	0, 188, 189, 182, 190, 192, 188, 0, 
	218, 224, 224, 224, 224, 0, 219, 218, 
	188, 209, 189, 182, 190, 220, 192, 188, 
	0, 221, 223, 223, 223, 223, 0, 222, 
	221, 188, 209, 189, 182, 190, 192, 188, 
	0, 188, 209, 189, 182, 190, 192, 223, 
	188, 223, 223, 223, 223, 0, 188, 209, 
	189, 182, 190, 220, 192, 224, 188, 224, 
	224, 224, 224, 0, 188, 209, 189, 182, 
	190, 217, 192, 225, 188, 225, 225, 225, 
	225, 0, 227, 0, 185, 227, 229, 0, 
	230, 229, 230, 185, 229, 188, 209, 189, 
	182, 190, 217, 192, 232, 225, 232, 188, 
	225, 225, 225, 225, 0, 233, 209, 189, 
	182, 234, 217, 236, 225, 233, 225, 225, 
	225, 225, 0, 233, 186, 189, 182, 234, 
	236, 195, 239, 246, 258, 225, 239, 246, 
	258, 233, 225, 225, 225, 0, 235, 0, 
	233, 235, 237, 0, 238, 237, 238, 233, 
	237, 188, 209, 189, 182, 190, 217, 192, 
	240, 225, 240, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	241, 225, 241, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	242, 225, 242, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	243, 225, 243, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	244, 225, 244, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	245, 225, 245, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	225, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 247, 225, 
	247, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 248, 225, 
	248, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 249, 225, 
	249, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 250, 225, 
	250, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 251, 225, 
	251, 188, 225, 225, 225, 225, 0, 252, 
	209, 189, 182, 253, 217, 255, 225, 252, 
	225, 225, 225, 225, 0, 252, 186, 189, 
	182, 253, 255, 195, 239, 225, 239, 252, 
	225, 225, 225, 0, 254, 0, 252, 254, 
	256, 0, 257, 256, 257, 252, 256, 188, 
	209, 189, 182, 190, 217, 192, 259, 225, 
	259, 188, 225, 225, 225, 225, 0, 188, 
	209, 189, 182, 190, 217, 192, 260, 225, 
	260, 188, 225, 225, 225, 225, 0, 261, 
	209, 189, 182, 262, 217, 264, 225, 261, 
	225, 225, 225, 225, 0, 261, 186, 189, 
	182, 262, 264, 195, 239, 246, 225, 239, 
	246, 261, 225, 225, 225, 0, 263, 0, 
	261, 263, 265, 0, 266, 265, 266, 261, 
	265, 188, 209, 189, 182, 190, 217, 192, 
	268, 225, 268, 188, 225, 225, 225, 225, 
	0, 188, 209, 189, 182, 190, 217, 192, 
	269, 225, 269, 188, 225, 225, 225, 225, 
	0, 261, 209, 189, 182, 262, 217, 264, 
	225, 261, 225, 225, 225, 225, 0, 185, 
	226, 228, 270, 185, 270, 270, 270, 270, 
	0, 272, 0, 182, 272, 274, 0, 275, 
	274, 275, 182, 274, 277, 0, 181, 277, 
	279, 0, 280, 279, 280, 181, 279, 282, 
	0, 301, 282, 284, 293, 293, 293, 293, 
	0, 285, 284, 301, 182, 281, 286, 289, 
	300, 301, 0, 287, 292, 292, 292, 292, 
	0, 288, 287, 301, 182, 281, 289, 300, 
	301, 0, 290, 0, 291, 290, 291, 301, 
	290, 301, 182, 281, 289, 300, 292, 301, 
	292, 292, 292, 292, 0, 301, 182, 281, 
	286, 289, 300, 293, 301, 293, 293, 293, 
	293, 0, 301, 182, 281, 283, 289, 300, 
	294, 301, 294, 294, 294, 294, 0, 296, 
	0, 178, 296, 298, 0, 299, 298, 299, 
	178, 298, 0, 181, 182, 276, 278, 181, 
	0, 0
]

class << self
	attr_accessor :_subprog_trans_actions
	private :_subprog_trans_actions, :_subprog_trans_actions=
end
self._subprog_trans_actions = [
	23, 19, 23, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 25, 25, 25, 25, 0, 0, 
	15, 0, 0, 15, 0, 15, 15, 15, 
	0, 0, 0, 17, 17, 17, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 0, 0, 7, 0, 
	7, 7, 7, 0, 0, 0, 9, 9, 
	9, 9, 0, 0, 11, 0, 0, 11, 
	11, 11, 11, 11, 11, 11, 0, 11, 
	11, 11, 0, 0, 0, 13, 0, 13, 
	13, 13, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 5, 
	0, 5, 5, 5, 0, 0, 0, 27, 
	0, 27, 0, 27, 27, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 27, 
	27, 27, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 27, 0, 27, 27, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 27, 27, 27, 27, 0, 27, 0, 
	27, 27, 27, 0, 27, 0, 0, 0, 
	0, 0, 27, 0, 27, 0, 27, 27, 
	0, 27, 0, 0, 0, 0, 0, 27, 
	0, 27, 0, 27, 27, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	13, 13, 13, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 13, 
	13, 13, 0, 13, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 13, 13, 0, 13, 0, 
	13, 13, 13, 13, 0, 13, 0, 0, 
	0, 0, 0, 13, 0, 13, 13, 13, 
	0, 13, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 13, 13, 13, 0, 
	13, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 33, 0, 13, 13, 33, 0, 
	33, 0, 33, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 0, 0, 0, 11, 
	11, 11, 11, 11, 11, 11, 0, 11, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 39, 0, 
	39, 39, 39, 0, 39, 0, 39, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 13, 0, 0, 0, 
	0, 0, 0, 11, 0, 0, 0, 0, 
	0, 11, 11, 11, 0, 11, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 30, 0, 13, 13, 
	30, 0, 30, 0, 30, 0, 0, 0, 
	0, 0, 0, 11, 0, 0, 0, 0, 
	0, 11, 11, 11, 11, 11, 0, 11, 
	11, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 36, 0, 
	13, 13, 36, 0, 36, 0, 36, 0, 
	0, 0, 0, 0, 9, 9, 9, 0, 
	9, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 17, 17, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 17, 17, 17, 
	0, 17, 17, 17, 17, 0, 17, 0, 
	0, 0, 0, 0, 17, 17, 17, 0, 
	17, 0, 17, 0, 0, 0, 0, 0, 
	17, 17, 17, 0, 17, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	21, 21, 21, 0, 0, 15, 0, 0, 
	15, 0, 15, 15, 15, 0, 0, 0, 
	42, 17, 42, 0, 42, 42, 42, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	0, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 9, 9, 9, 9, 0, 0, 
	11, 0, 0, 11, 11, 11, 11, 11, 
	11, 11, 0, 11, 11, 11, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 13, 13, 13, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 13, 13, 13, 0, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 13, 13, 
	0, 13, 0, 13, 13, 13, 13, 0, 
	13, 0, 0, 0, 0, 0, 13, 0, 
	13, 13, 13, 0, 13, 0, 13, 0, 
	0, 0, 0, 0, 13, 0, 13, 13, 
	13, 0, 13, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 13, 
	13, 13, 0, 13, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 33, 0, 13, 
	13, 33, 0, 33, 0, 33, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 11, 11, 11, 11, 11, 11, 
	11, 0, 11, 11, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 39, 0, 39, 39, 39, 0, 39, 
	0, 39, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 13, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	0, 0, 0, 0, 11, 11, 11, 0, 
	11, 11, 11, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 13, 13, 13, 0, 13, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 30, 
	0, 13, 13, 30, 0, 30, 0, 30, 
	0, 0, 0, 0, 0, 0, 11, 0, 
	0, 0, 0, 0, 11, 11, 11, 11, 
	11, 0, 11, 11, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 13, 13, 13, 0, 13, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 36, 0, 13, 13, 36, 0, 36, 
	0, 36, 0, 0, 0, 0, 0, 9, 
	9, 9, 0, 9, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 42, 17, 42, 0, 42, 
	42, 42, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 42, 17, 42, 42, 42, 
	42, 0, 0, 0, 0, 0, 0, 0, 
	0, 42, 17, 42, 42, 42, 0, 42, 
	0, 0, 0, 0, 0, 42, 17, 42, 
	0, 42, 42, 0, 42, 0, 0, 0, 
	0, 0, 42, 17, 42, 0, 42, 42, 
	0, 42, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :subprog_start
end
self.subprog_start = 1;
class << self
	attr_accessor :subprog_first_final
end
self.subprog_first_final = 300;
class << self
	attr_accessor :subprog_error
end
self.subprog_error = 0;

class << self
	attr_accessor :subprog_en_signature
end
self.subprog_en_signature = 1;


# line 62 "lib/vorax/parser/grammars/subprog.rl"
					
# line 955 "lib/vorax/parser/grammars/subprog.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = subprog_start
end

# line 63 "lib/vorax/parser/grammars/subprog.rl"
					
# line 964 "lib/vorax/parser/grammars/subprog.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _subprog_key_offsets[cs]
	_trans = _subprog_index_offsets[cs]
	_klen = _subprog_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _subprog_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _subprog_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _subprog_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _subprog_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _subprog_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	cs = _subprog_trans_targs[_trans]
	if _subprog_trans_actions[_trans] != 0
		_acts = _subprog_trans_actions[_trans]
		_nacts = _subprog_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _subprog_actions[_acts - 1]
when 0 then
# line 7 "lib/vorax/parser/grammars/subprog.rl"
		begin

  rest = data[(p..data.length)]
  pos = Parser.next_argument(rest) - 1
	@args.last && @args.last.has_default = true
	p = p + pos - 1 if pos > 0
		end
when 1 then
# line 14 "lib/vorax/parser/grammars/subprog.rl"
		begin

	text = data[p..eof]
	pos = 0
	walker = PLSQLWalker.new(text)
	walker.register_spot(/(\bAS\b)|(\bIS\b)|;/i) do |scanner|
		pos = scanner.pos - scanner.matched.length
	  scanner.terminate
	end
	walker.walk
	p = p + pos - 1 if pos > 0
  @end_def = p
		end
when 2 then
# line 28 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 3 then
# line 28 "lib/vorax/parser/grammars/subprog.rl"
		begin
@return_type = data[@start...p]		end
when 4 then
# line 29 "lib/vorax/parser/grammars/subprog.rl"
		begin
 @args.last && @args.last.direction=:inout		end
when 5 then
# line 30 "lib/vorax/parser/grammars/subprog.rl"
		begin
@args.last && @args.last.direction = :in		end
when 6 then
# line 31 "lib/vorax/parser/grammars/subprog.rl"
		begin
@args.last && @args.last.direction = :out		end
when 7 then
# line 33 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 8 then
# line 33 "lib/vorax/parser/grammars/subprog.rl"
		begin
@args << ArgumentItem.new(data[@start...p])		end
when 9 then
# line 35 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 10 then
# line 35 "lib/vorax/parser/grammars/subprog.rl"
		begin
@args.last && @args.last.data_type = data[@start...p]		end
when 11 then
# line 39 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 12 then
# line 39 "lib/vorax/parser/grammars/subprog.rl"
		begin
@name = data[@start...p]		end
when 13 then
# line 40 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 14 then
# line 40 "lib/vorax/parser/grammars/subprog.rl"
		begin
@kind = data[@start...p]		end
when 15 then
# line 41 "lib/vorax/parser/grammars/subprog.rl"
		begin
@start = p		end
when 16 then
# line 41 "lib/vorax/parser/grammars/subprog.rl"
		begin
@kind = data[@start...p]		end
# line 1128 "lib/vorax/parser/grammars/subprog.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 64 "lib/vorax/parser/grammars/subprog.rl"
				  data.chop
				end
				{:name => @name, 
				 :kind => @kind, 
				 :args => @args, 
				 :return_type => @return_type, 
				 :end_def => @end_def}
			end

		end
	
	end

end
